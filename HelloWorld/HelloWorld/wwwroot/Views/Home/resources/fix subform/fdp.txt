

body {
    overflow-x: hidden;
    padding: 15px;
}

.pdf-toolbar {
    width: 300px;
    text-align: center;
    margin-left: -150px;
    background: rgba(0, 0, 0, 0.2);
    border-radius: 1.5em;
    color: white;
    transition: all 0.5s ease-in-out;
}



    .pdf-toolbar:hover, .pdf-toolbar:focus {
        background: rgba(0, 0, 0, 0.6);
    }

pdf-document {
    display: block;
    position: relative;
}

    pdf-document .pdf-container {
        background-color: #bbb;
        overflow: auto;
        height: 600px;
        width: 100%;
    }

    pdf-document canvas {
        background-color: #fff;
        border: 1px solid #000;
        margin: 5px;
    }
	
viewPdf() {
        if (filesMap.contains("pdf")) {
            let pdf = filesMap.getValue("pdf");
            this.dialogService.open({ viewModel: PdfDialog, model: { data:pdf.file, parent:this.parent } })
                .then(response => {
                    console.log("modal could not be opened")
                });
        }
    }	
	
// dialog
<!--
 Aurelia notes:
    ${}                 - data bound to the view from the view-model or ts file
    value.bind          - creates two-way bind for value attribute
    model.bind          - creates two-way bind for the object or model
    change.delegate     - jQuery change event
    click.delegate      - jQuery click event
-->

<!--
 Aurelia notes:
    ${}                 - data bound to the view from the view-model or ts file
    value.bind          - creates two-way bind for value attribute
    model.bind          - creates two-way bind for the object or model
    change.delegate     - jQuery change event
    click.delegate      - jQuery click event
-->

<!--
 Aurelia notes:
    ${}                 - data bound to the view from the view-model or ts file
    value.bind          - creates two-way bind for value attribute
    model.bind          - creates two-way bind for the object or model
    change.delegate     - jQuery change event
    click.delegate      - jQuery click event
-->

<template>
    <div id="author-element">
        <ai-dialog>
            <ai-dialog-header>
                <button type="button" click.trigger="controller.cancel()" class="close" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                <h3 style="text-align: center">PDF Upload Confirmation</h3>
            </ai-dialog-header>
            <ai-dialog-body>
               
                <require from="./pdf-document"></require>
                <section>
                    <div class="row">
                        <div class="col-md-12" repeat.for="document of documents">
                            <div class="col-xs-12">
                                <div class="form-group">
                                    
                                </div>
                            </div>
                            <div class="col-xs-12">

                                <pdf-document url.bind="document.url" 
                                              page.bind="document.pageNumber" 
                                              lastpage.bind="document.lastpage"
                                              scale.bind="document.scale">
                                </pdf-document>

                                <div style="position: absolute; top: 2em; left: 50%; right: 50%;">
                                    <div class="pdf-toolbar text-center">
                                        <!--
                                        <input id="pagenumber" type="number" class="form-control" value.bind="document.pageNumber" />
                                        / ${document.lastpage}-->
                                        <button click.delegate="prevPage(document)" class="btn btn-link"
                                                data-toggle="tooltip" data-placement="top" title="previous">
                                            <span class="glyphicon glyphicon-circle-arrow-up"></span>
                                        </button>
                                        <button click.delegate="nextPage(document)" class="btn btn-link">
                                            <span class="glyphicon glyphicon-circle-arrow-down"></span>
                                        </button>
                                        ${document.pageNumber} / ${document.lastpage}
                                        <button click.delegate="zoomIn(document)" class="btn btn-link">
                                            <span class="glyphicon glyphicon-plus-sign"></span>
                                        </button>
                                        <button click.delegate="zoomOut(document)" class="btn btn-link">
                                            <span class="glyphicon glyphicon-minus-sign"></span>
                                        </button>
                                    </div>
                                </div>
                            </div>

                        </div>
                    </div>
                </section>
                <br />
                <input type="checkbox" />I have reviewed the document above<br />
            </ai-dialog-body>

            <ai-dialog-footer>
                <button click.trigger="cancel()">Cancel</button>
                <button click.trigger="ok()">Ok</button>
            </ai-dialog-footer>

        </ai-dialog>
    </div>
</template>

import { autoinject} from "aurelia-framework"
import { DialogController } from 'aurelia-dialog';

@autoinject()
export class PdfDialog{

    documents = [
    {
        url: '',
        draftUrl: '',
        pageNumber: 1,
        scale: .8,
        lastpage: 1
    }]
    
    constructor(private controller:DialogController) {}

    activate(data:any) {
        this.documents[0].url = data.data;
    }

    loadUrl(document) {
        document.url = this.documents[0].draftUrl;
    }

    firstPage(document) {
        document.pageNumber = 1;
    }

    nextPage(document) {
        if (document.pageNumber >= document.lastpage) return;
        document.pageNumber += 1;
    }

    prevPage(document) {
        if (document.pageNumber <= 1) return;
        document.pageNumber -= 1;
    }

    lastPage(document) {
        document.pageNumber = document.lastpage;
    }

    goToPage(document, page) {
        if (page <= 0 || page > document.lastpage) return;
        document.pageNumber = page;
    }

    zoomIn(document) {
        document.scale = Number(document.scale) + 0.1;
    }

    zoomOut(document) {
        document.scale = Number(document.scale) - 0.1;
    }

    ok() {
        this.controller.ok();
    }

    cancel() {
        this.controller.cancel()
    }
}

// pdf-document
<template>

    <div element.ref="container" id.bind="fingerprint" class="pdf-container" scroll.trigger="renderHandler() & debounce:100">
        <div repeat.for="page of lastpage" class="text-center">
            <canvas id="${fingerprint}-page${(page + 1)}"></canvas>
        </div>
    </div>
</template>

import { autoinject, bindable, bindingMode, Loader, TaskQueue } from 'aurelia-framework';
import { SyntaxInterpreter } from 'aurelia-templating-binding';

import "pdfjs-dist";

function generateUniqueDomId() {
    var S4 = function () {
        return (((1 + Math.random()) * 0x10000) | 0)
            .toString(16)
            .substring(1);
    };

    return `_${S4()}${S4()}-${S4()}-${S4()}-${S4()}-${S4()}${S4()}${S4()}`;
}

function base64ToUint8Array(base64) {
    var raw = atob(base64);
    var uint8Array = new Uint8Array(new ArrayBuffer(raw.length));
    for (var i = 0, len = raw.length; i < len; ++i) {
        uint8Array[i] = raw.charCodeAt(i);
    }
    return uint8Array;
}

function checkIfElementVisible(container: HTMLDivElement, element: HTMLCanvasElement) {

    var containerBounds = {
        top: container.scrollTop,
        bottom: container.scrollTop + container.clientHeight
    };

    var elementBounds = {
        top: element.offsetTop,
        bottom: element.offsetTop + element.clientHeight
    };

    return (!((elementBounds.bottom < containerBounds.top && elementBounds.top < containerBounds.top)
        || (elementBounds.top > containerBounds.bottom && elementBounds.bottom > containerBounds.bottom)));
}

function render(renderPromise, scale) {

    return Promise.resolve(renderPromise)
        .then((renderObject) => {
            if (renderObject.rendered) return Promise.resolve(renderObject);
            renderObject.rendered = true;

            var viewport = renderObject.page.getViewport(scale);
            var context = renderObject.element.getContext('2d');

            return renderObject.page.render({
                canvasContext: context,
                viewport: viewport
            })
                .promise.then(() => {
                    return renderObject;
                });
        });
};

interface ISyntaxInterpreter extends SyntaxInterpreter1 {
    trigger2(resources?: any, element?: any, info?: any): any;
}

class SyntaxInterpreter1 extends SyntaxInterpreter {
    trigger2(resources?: any, element?: any, info?: any): any {
        super.trigger(resources, element, info);
    }
}

@autoinject()
export class PdfDocument {
    @bindable url
    @bindable({ defaultValue: 1, defaultBindingMode: bindingMode.twoWay }) page
    @bindable({ defaultValue: 1, defaultBindingMode: bindingMode.twoWay }) lastpage
    @bindable({ defaultValue: 1, defaultBindingMode: bindingMode.twoWay }) scale

    // **********************

    pdfDoc: PDFDocumentProxy;
    pageNum: number;

    // **********************

    currentpage: any = null;
    resolveDocumentPending: any = null;
    worker: any = null;
    container: HTMLDivElement;

    pages: any = [];

    fingerprint: string;
    test;
    parent;

    constructor(private loader: Loader, private taskQueue: TaskQueue) {
        //PDFJS.workerSrc = loader.normalizeSync("pdfjs-dist/build/pdf.worker.js", "pdfjs-dist");
        PDFJS.workerSrc = "./node_modules/pdfjs-dist/build/pdf.worker.js"

        this.fingerprint = generateUniqueDomId();
        this.taskQueue = taskQueue;
        this.test = true;
    }

    attached() {
        $("#fingerprint").scroll(function () {
            this.pageHandler();
        })
    }

    urlChanged(newValue: string, oldValue: string) {
        if (newValue === oldValue) return;

        let pdfData = base64ToUint8Array(newValue);
        if (pdfData === undefined) return

        let documentPending;
        var promise = documentPending || Promise.resolve();
        documentPending = new Promise((resolve, reject) => {
            this.resolveDocumentPending = resolve.bind(this);
        })

        return promise
            .then((pdf: PDFDocumentProxy) => {
                if (pdf) {
                    pdf.destroy();
                }
                return PDFJS.getDocument(pdfData);
            })
            .then((pdf) => {
                this.lastpage = pdf.numPages;

                pdf.cleanupAfterRender = true;
                for (var i = 0; i < pdf.numPages; i++) {
                    this.pages[i] = pdf.getPage(Number(i + 1))
                        .then((page) => {
                            var viewport = page.getViewport(this.scale);
                            var element = <HTMLCanvasElement>document.getElementById(`${this.fingerprint}-page${page.pageNumber}`);

                            this.taskQueue.queueMicroTask(() => {
                                element.height = viewport.height;
                                element.width = viewport.width;
                            });

                            var obj = {
                                element: element,
                                page: page,
                                rendered: false,
                                clean: false
                            };

                            return new PageObject(obj);
                        })
                }

                console.log(this.pages.length);

                this.pages.forEach((page) => {
                    page.then((renderObject: PageObject) => {
                        if (checkIfElementVisible(this.container, renderObject.element)) {
                            if (renderObject.rendered) return;
                            render(page, this.scale);
                        }
                    });
                });
            });
    }

    pageChanged(newValue, oldValue) {
        if (newValue === oldValue || isNaN(Number(newValue)) || Number(newValue) > this.lastpage || Number(newValue) < 0) {
            this.page = oldValue;
            return;
        }

        if (Math.abs(newValue - oldValue) <= 1) return;

        this.pages[newValue - 1]
            .then((renderObject) => {
                this.container.scrollTop = renderObject.element.offsetTop;
                render(this.pages[newValue - 1], this.scale);
            });
    }

    lastpageChanged() {
        console.log("PdfDocument :: urlChanged" + this.lastpage);
    }

    scaleChanged(newValue, oldValue) {
        if (newValue === oldValue || isNaN(Number(newValue))) return;

        Promise.all(this.pages)
            .then((values) => {
                values.forEach((renderObject: PageObject) => {
                    if (!renderObject) return;

                    var viewport = renderObject.page.getViewport(newValue);

                    renderObject.rendered = false;

                    this.taskQueue.queueMicroTask(() => {
                        renderObject.element.height = viewport.height;
                        renderObject.element.width = viewport.width;

                        if (renderObject.page.pageNumber === this.page) {
                            this.container.scrollTop = renderObject.element.offsetTop;
                        }
                    });
                });

                return values;
            })
            .then((values) => {
                this.pages.forEach((page) => {
                    page.then((renderObject) => {
                        this.taskQueue.queueMicroTask(() => {
                            if (checkIfElementVisible(this.container, renderObject.element)) {
                                render(page, this.scale);
                            }
                        });
                    });
                });
            });
    }

    pageHandler() {

        this.pages.forEach((page) => {
            page.then((renderObject: PageObject) => {
                if ((this.container.scrollTop + this.container.clientHeight) >= renderObject.element.offsetTop
                    && (this.container.scrollTop <= renderObject.element.offsetTop)) {
                    page = renderObject.page.pageNumber;
                }
            });
        });
    }

    renderHandler() {

        Promise.all(this.pages)
            .then((values) => {
                values.forEach((renderObject: PageObject) => {
                    if (!renderObject) return;

                    if (!checkIfElementVisible(this.container, renderObject.element)) {
                        if (renderObject.rendered && renderObject.clean) {
                            renderObject.page.cleanup();
                            renderObject.clean = true;
                        }

                        return;
                    }

                    this.taskQueue.queueMicroTask(() => {
                        if (renderObject.rendered) return;
                        render(renderObject, this.scale);
                    });
                });
            });
    }
}

class PageObject {
    element;
    page;
    rendered;
    clean;

    constructor(data) {
        this.element = data.element;
        this.page = data.page;
        this.rendered = data.rendered;
        this.clean = data.clean;
    }
}


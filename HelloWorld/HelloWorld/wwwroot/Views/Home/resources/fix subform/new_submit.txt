/* Styles go here */

.input-group-addon {
  width:200px;
  text-align:left;
}

.form-control:last-child {
  width:300px;
}

.form-control[disabled]:focus,
.form-control[readonly]:focus,
fieldset[disabled] .form-control {
  border-color:#ccc;
  -webkit-box-shadow: none;
  box-shadow: none;
  background-color: #eee;
  opacity: 1;
  cursor: not-allowed;
}


// app

<template>
  
    <section class="container form-inline line-spacing">
        <require from = "./retrieve-report-type"></require>
        <retrieve-report-type utility.bind="dataUtility" showreport.bind="showReport"></retrieve-report-type>
    </section>
    
    <section class="container" show.bind="showReport">
        <div class="row">
            <div class="col-md-12 col-sm-12 col-xs-12">
                <div class="panel panel-default">
                    <div class="panel-heading clearfix line-spacing">
                        <h3 class="panel-title">General Information</h3>
                    </div>
                </div>
                <div class="panel-body">
                    
                    <div class="row">
                        <p class="col-sm-12">
                            <label><span class="error">*</span> Indicates required field</label>
                        </p>
                        <div class="col-lg-7 col-sm-12 line-spacing">
                               <require from="./retrieve-businesses"></require>
							   <retrieve-businesses reviewer.two-way="finalReviewer" loadingSpinner.two-way="loadingSpinner"
                                success.bind="requiredElementData[requiredFieldList.BUSINESS].success" 
                                required.bind="requiredElementData[requiredFieldList.BUSINESS].required"
                                utility.bind="dataUtility" businesses.bind="selectedBusinessCapabilities">
                            </retrieve-businesses>
                        </div>
                    </div>
                    
                </div>
            </div>
        </div> 
    </section>
	
	<button click.delegate="cancel()">Cancel</button>
    <button click.delegate="submit()">Sumit</button>
    
</template>



import { bindable, bindingMode} from "aurelia-framework";
import {FormDataUtility, RequiredFieldList, ValidateForm} from "./formDataUtility"
import {CSSUtility} from "./CSSUtility"

export class App { 
  
    @bindable({ defaultBindingMode: bindingMode.twoWay }) showreport;
    @bindable({ defaultBindingMode: bindingMode.twoWay }) selectedBusinessCapabilities = [];
    
    dataUtility = new FormDataUtility();
    requiredFieldList = RequiredFieldList;
    
    constructor(){ 
        this.requiredElementData = this.dataUtility.getRequiredElementData();
        
        //this.reset(); 
    }
    
    cancel(){
       this.selectedBusinessCapabilities = [];
    }
	
	submit() {
        if (this.isFormValid()) {
            console.log("OK")
        }
        else {
            console.log("NOT OK")
        }
    }
	
	 getSelectedBusinessCapabilities(){
        return this.selectedBusinessCapabilities;
    }
	
	isError(obj) {
        if (obj)
            return CSSUtility.isValidFieldSuccess();
        else
            return CSSUtility.isValidFieldError();
    }
	
	isFormValid() {

        let valid = true;
         
        for (let i in RequiredFieldList) {
            let id = this.dataUtility.getID(RequiredFieldList[i]); 
            var element =  document.getElementById(id);
            
            if(typeof(element) != 'undefined' && element != null){
                let v = document.getElementById(id).value
                valid = this.dataUtility.setSuccess(RequiredFieldList[i], ValidateForm.isEmpty(v));
            }else{
                if (id instanceof Function) {
                    console.log("FormValid - else " + id);
                    //valid = this.dataUtility.setSuccess(RequiredFieldList[i], ValidateForm.isEmptyContainer(id));
                }
            }
             
        }
        
        return valid;
        
        //valid = this.dataUtility.setSuccess(RequiredFieldList.FINAL_REVIEWER, ValidateForm.isEmpty(this.finalReviewer))
        return valid;
    }
    
    reset() {   
		this.utility.reset();
	}
}

// retrieve-report-type /////////////////////////////////////////////

<template>
  <div class="form-group">
      <h3>
          <label for="reports">Submission Form &nbsp;&nbsp;&nbsp;</label>
          <select class="form-control" id="reports" value.bind="selectedReport" change.delegate="changeReportCurrentBrowsers($event)">
              <option model.bind="null">Choose A Report Type</option>
              <option disable>-------------------------</option>
              <option repeat.for="reportSelection of reportSelections" model.bind="reportSelection" click.delegate="changeReportIE(reportSelection)">
              ${reportSelection.name}
              </option>
          </select>
      </h3>
  </div>
</template>

import { bindable, bindingMode} from "aurelia-framework";
import {RequiredFieldList} from "./formDataUtility"

let _reportSelections = {
    CRI: 0,
    PROJECT_LEARNING: 1,
    TECH_LEARNING: 2
}

var centralReportIndex = [7,8];
var projectLearning = [1, 4, 5, 7, 8];
var technicalMeeting = [1, 3, 4, 5, 7, 8];

export class RetrieveReportType{
  
  @bindable({ defaultBindingMode: bindingMode.twoWay }) showreport;
  @bindable utility;
  
  reportSelections = [
        { id: 0, name: 'CRI' },
        { id: 1, name: 'Project Learnings' },
        { id: 2, name: 'Technical Meetings' }
  ];
  
  changeReportIE(report) {
    this.changeReport(report);
  }

  changeReportCurrentBrowsers(event) {       
    this.changeReport(this.selectedReport);
  }
  
  changeReport(report) {
    this.reset();
        if (report != null) {
            this.showreport = true; 
            switch (report.id) {
                case _reportSelections.CRI: 
                    this.initFormData(centralReportIndex)
                    break;
                
                case _reportSelections.PROJECT_LEARNING: 
                    this.initFormData(projectLearning)
                    break;
                    
                case _reportSelections.TECH_LEARNING: 
                    this.initFormData(technicalMeeting)
                    break;
            }
        }
  }
  
  initFormData(obj){
    for (let i = 0; i < obj.length; i++) 
        this.utility.setRequired(obj[i], false);
  }
  
  reset() {   
    this.utility.reset();
  }
  
}

// retrieve-businesses

<template bindable="finalReviewer">
    <div class="input-group">
        <span class="input-group-addon" css.bind="isError(success)">Business / Capabilites
            <span class="error" bind.show="required">*</span>
            <i class='fa fa-spin fa-spinner' style='margin: 0 auto' if.bind="loadingSpinner"></i>
        </span>
        <select multiple class="form-control" value.bind="businesses" style="width: 100%">
            <option repeat.for="businessCapability of businessCapabilities" value.bind="businessCapability">
                ${businessCapability}
            </option>
        </select>
        <span class="input-group-btn">
            <button type="button" class="btn btn-primary btn-block">Add Final Reviewer</button>
        </span>
    </div>
    <div>
      <div repeat.for="business of businesses">
          ${business}
        </div>
    </div>
</template>

import { inject, bindable, bindingMode } from "aurelia-framework";
import { CSSUtility } from "./CSSUtility"

export class RetrieveBusinesses{
    @bindable({ defaultBindingMode: bindingMode.twoWay }) businesses = [];
    @bindable({ defaultBindingMode: bindingMode.twoWay }) reviewer
    @bindable required;
    @bindable utility;
    @bindable success;
    
    businessCapabilities = ["One", "Two" ,"Three"];
    
    isError(obj) {
        if (obj)
            return CSSUtility.isValidFieldSuccess();
        else
            return CSSUtility.isValidFieldError();
    }
}

// CSSUtility
export class CSSUtility {
  
  static isValidFieldSuccess() {
    return "background-color:#eee; color:#555";
  }
  
  static isValidFieldError() {
    return "background-color:#f00; color:#fff;
  }
}

// formDataUtility
import { transient } from 'aurelia-framework';

export var RequiredFieldList = { 
  TITLE: 0,
  ABSTRACT: 1,
  AUTHOR: 2,
  FINAL_REVIEWER: 3,
  REPORT_NUM: 4,
  LTD: 5,
  EXPORT_CONTROL: 6,
  NON_AUTHOR: 7,
  DATABOOK_NUM: 8,
  BUSINESS: 9
};

let RequiredElementData = [
    { id: "title", key: "TITLE", title: "Title", error: "A Report Title is requried", success: true, required: true, disable: false },
    { id: "abstract", key: "ABSTRACT", title: "Report Abstract", error: "A Report Abstract is requried", success: true, required: true, disable: false },
    { id: "dowAuthors", key: "AUTHOR", title: "Dow Author", error: "A Dow Author is requried", success: true, required: true, disable: false },
    { id: "finalReviewer", key: "FINAL_REVIEWER", title: "Business / Capability", error: "A Final Reviewer is requried", success: true, required: true, disable: false },
    { id: "reportNumber", key: "REPORT_NUM", title: "Report Number", error: "A Report Number is requried", success: true, required: true, disable: false },
    { id: "LTD", key: "LTD", title: "Limited Distribution", error: "Limited Distribution is requried", success: true, required: true, disable: false },
    { id: "ELN", key: "EXPORT_CONTROL", title: "Export Control", error: "Export Control is requried", success: true, required: true, disable: false },
    { id: "databookNumber", key: "NON_AUTHOR", title: "Non Dow Author", error: "Dow Author", success: true, required: true, disable: true },
    { id: "nonDowAuthors", key: "DATABOOK_NUM", title: "Data Book Number", error: "Data Book NUmber has incorrect format", success: true, required: true, disable: true },
    { id: "business", key: "BUSINESS", title: "Data Book Number", error: "Data Book NUmber has incorrect format", success: true, required: true, disable: true }

];


@transient()
export class FormDataUtility { 
  
  constructor(){
    this.requiredElementData = RequiredElementData;
  }
  
  getID(obj){
    console.log("FormDataUtility :: getID " + obj);
    return this.requiredElementData[obj].id;
  }
  
  getRequiredElementData(){
    return this.requiredElementData;  
  }
  
  setSuccess(obj, value) { 
     this.requiredElementData[obj].success = value;
    return this.requiredElementData[obj].success
  }
  
  setRequired(obj, value) {
    this.requiredElementData[obj].required = value;
    return this.requiredElementData[obj].required;
  }

  getSuccess(obj){
    return this.requiredElementData[obj].success;
  }

  getRequired(obj){
    return this.requiredElementData[obj].required;
  }
  
  reset(){
        for (let i in RequiredFieldList) {
              this.setRequired(RequiredFieldList[i], true);
              this.setSuccess(RequiredFieldList[i], true);
              console.log(i);
          
        }
    }
}

export class ValidateForm {
	static isEmpty(str) {
		console.log("ValidateForm :: isEmpty: " + str);
		return (!!str);
	}
	
	static isEmptyContainer(obj) {
		return (typeof obj != "undefined" && obj != null && obj.length > 0)
	}
	
	static isTitleValid() {
		return true;
	}
}
